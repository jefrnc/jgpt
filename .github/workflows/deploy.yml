name: 🚀 Deploy Trading Bot to GCP

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger

env:
  VM_NAME: flask-vm
  PROJECT_ID: gap-detector-49a13
  ZONE: us-central1-a

jobs:
  deploy:
    name: Deploy to GCP VM
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: 🔧 Setup Google Cloud CLI  
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: 🔑 Setup SSH
      run: |
        echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > /tmp/ssh_key
        echo "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDTnAkDxn/uapY1M5fPNKmAYbKsaHz+ziGwpNWGeril2 Joseph@flask-vm" > /tmp/ssh_key.pub
        chmod 600 /tmp/ssh_key
        chmod 644 /tmp/ssh_key.pub
        
    - name: 🏥 Health Check - VM Status
      run: |
        gcloud compute instances describe ${{ env.VM_NAME }} \
          --zone=${{ env.ZONE }} \
          --format="value(status)" || echo "VM not found"
          
    - name: 🛠️ Initial VM Setup (if needed)
      run: |
        # Check if trading bot directory exists
        SETUP_NEEDED=$(gcloud compute ssh ${{ env.VM_NAME }} \
          --zone=${{ env.ZONE }} \
          --command="[ ! -d '\$HOME/trading-bot' ] && echo 'true' || echo 'false'" \
          --ssh-key-file=/tmp/ssh_key \
          --quiet || echo 'true')
          
        if [ "$SETUP_NEEDED" = "true" ]; then
          echo "🔧 First time setup - installing dependencies..."
          gcloud compute ssh ${{ env.VM_NAME }} \
            --zone=${{ env.ZONE }} \
            --command="sudo apt update && sudo apt install -y python3 python3-pip python3-venv git curl htop build-essential python3-dev pkg-config" \
            --ssh-key-file=/tmp/ssh_key
        else
          echo "✅ VM already configured"
        fi
        
    - name: 📦 Deploy Application
      run: |
        echo "🚀 Deploying trading bot..."
        
        # Create .env file with secrets using echo
        echo "# Alpaca API Credentials" > /tmp/bot.env
        echo "ALPACA_API_KEY=${{ secrets.ALPACA_API_KEY }}" >> /tmp/bot.env
        echo "ALPACA_SECRET_KEY=${{ secrets.ALPACA_SECRET_KEY }}" >> /tmp/bot.env
        echo "ALPACA_BASE_URL=https://paper-api.alpaca.markets" >> /tmp/bot.env
        echo "ALPACA_DATA_URL=https://data.alpaca.markets" >> /tmp/bot.env
        echo "" >> /tmp/bot.env
        echo "# Trading Parameters" >> /tmp/bot.env
        echo "SCANNER_INTERVAL=300" >> /tmp/bot.env
        echo "MIN_GAP_PERCENT=5" >> /tmp/bot.env
        echo "MAX_FLOAT_MILLIONS=50" >> /tmp/bot.env
        echo "MIN_PRICE=0.50" >> /tmp/bot.env
        echo "MAX_PRICE=20.00" >> /tmp/bot.env
        echo "" >> /tmp/bot.env
        echo "# Trading Hours (Eastern Time)" >> /tmp/bot.env
        echo "PREMARKET_START=04:00" >> /tmp/bot.env
        echo "PREMARKET_END=09:30" >> /tmp/bot.env
        echo "MARKET_OPEN=09:30" >> /tmp/bot.env
        echo "MARKET_CLOSE=16:00" >> /tmp/bot.env
        echo "AFTERHOURS_END=20:00" >> /tmp/bot.env
        echo "" >> /tmp/bot.env
        echo "# Scanner Schedule" >> /tmp/bot.env
        echo "ENABLE_PREMARKET=true" >> /tmp/bot.env
        echo "ENABLE_AFTERHOURS=false" >> /tmp/bot.env
        echo "WEEKEND_PAUSE=true" >> /tmp/bot.env
        echo "" >> /tmp/bot.env
        echo "# Telegram Bot" >> /tmp/bot.env
        echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> /tmp/bot.env
        echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> /tmp/bot.env
        echo "" >> /tmp/bot.env
        echo "# Finnhub API" >> /tmp/bot.env
        echo "FINNHUB_API_KEY=${{ secrets.FINNHUB_API_KEY }}" >> /tmp/bot.env
        echo "" >> /tmp/bot.env
        echo "# Other APIs (optional)" >> /tmp/bot.env
        echo "BENZINGA_API_KEY=" >> /tmp/bot.env
        echo "OPENAI_API_KEY=" >> /tmp/bot.env
        echo "ANTHROPIC_API_KEY=" >> /tmp/bot.env
        
        # Create deployment script
        cat > /tmp/deploy_script.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "📁 Setting up directory..."
        TRADING_DIR="$HOME/trading-bot"
        
        # Clone or update repository
        if [ -d "$TRADING_DIR" ]; then
          echo "📥 Updating existing repository..."
          cd "$TRADING_DIR"
          git fetch origin
          git reset --hard origin/main
        else
          echo "📥 Cloning repository..."
          git clone https://github.com/jefrnc/jgpt.git "$TRADING_DIR"
          cd "$TRADING_DIR"
        fi
        
        # Setup virtual environment
        echo "🐍 Setting up Python environment..."
        python3 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        
        # Create directories
        mkdir -p logs data
        chmod +x deploy/*.sh src/main.py test_*.py
        
        echo "✅ Application updated successfully"
        EOF
        
        chmod +x /tmp/deploy_script.sh
        
        # Execute deployment first
        gcloud compute ssh ${{ env.VM_NAME }} \
          --zone=${{ env.ZONE }} \
          --command="$(cat /tmp/deploy_script.sh)" \
          --ssh-key-file=/tmp/ssh_key
          
        # Copy .env file to VM after directory is created
        gcloud compute scp /tmp/bot.env ${{ env.VM_NAME }}:~/trading-bot/.env \
          --zone=${{ env.ZONE }} \
          --ssh-key-file=/tmp/ssh_key
          
    - name: 🔧 Check Service Status
      run: |
        echo "🔧 Checking trading bot service..."
        
        gcloud compute ssh ${{ env.VM_NAME }} \
          --zone=${{ env.ZONE }} \
          --command="if systemctl is-active --quiet trading-bot; then echo '✅ Bot is already running - deployment complete'; else echo '⚠️ Bot not running - may need manual restart'; fi" \
          --ssh-key-file=/tmp/ssh_key
          
    - name: 🏥 Health Check
      run: |
        echo "🏥 Running health checks..."
        
        cat > /tmp/health_check.sh << 'EOF'
        #!/bin/bash
        
        TRADING_DIR="$HOME/trading-bot"
        cd "$TRADING_DIR"
        
        echo "📊 System Status:"
        sudo systemctl status trading-bot --no-pager -l || true
        
        echo ""
        echo "📝 Recent Logs:"
        journalctl -u trading-bot -n 5 --no-pager || true
        
        echo ""
        echo "🔍 Process Check:"
        ps aux | grep python | grep main.py || echo "No bot process found"
        
        echo ""
        echo "💻 Resource Usage:"
        free -h
        df -h /
        EOF
        
        gcloud compute ssh ${{ env.VM_NAME }} \
          --zone=${{ env.ZONE }} \
          --command="$(cat /tmp/health_check.sh)" \
          --ssh-key-file=/tmp/ssh_key
          
    - name: 📱 Deployment Notification
      if: always()
      run: |
        # Get commit info
        COMMIT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "🤖 Trading bot is now running on GCP VM"
          echo "📊 Monitor: gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.ZONE }} --command='journalctl -u trading-bot -f'"
          
          # Send Telegram notification
          cat > /tmp/deploy_notify.sh << EOF
          #!/bin/bash
          cd "\$HOME/trading-bot"
          source venv/bin/activate
          
          PYTHONPATH=. python -c "
import os
import requests
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

token = os.getenv('TELEGRAM_BOT_TOKEN')
chat_id = os.getenv('TELEGRAM_CHAT_ID')

if token and chat_id:
    commit_sha = '${{ github.sha }}'[:7]
    commit_msg = '''${{ github.event.head_commit.message }}'''
    current_time = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')
    
    message = f'''🚀 *Trading Bot Deployed Successfully*
    
📦 *Commit:* \`{commit_sha}\`
📝 *Message:* {commit_msg.split(chr(10))[0]}
⏰ *Time:* {current_time}
🖥️ *Server:* GCP VM (flask-vm)

✅ Bot is running and scanning for gaps...'''
    
    response = requests.post(f'https://api.telegram.org/bot{token}/sendMessage', {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'Markdown'
    })
    
    if response.status_code == 200:
        print('✅ Deployment notification sent to Telegram')
    else:
        print(f'⚠️ Failed to send Telegram notification: {response.text}')
else:
    print('⚠️ Telegram credentials not configured')
"
          EOF
          
          chmod +x /tmp/deploy_notify.sh
          
          gcloud compute ssh ${{ env.VM_NAME }} \
            --zone=${{ env.ZONE }} \
            --command="$(cat /tmp/deploy_notify.sh)" \
            --ssh-key-file=/tmp/ssh_key || echo "⚠️ Failed to send notification"
          
        else
          echo "❌ Deployment failed!"
          echo "🔍 Check logs: gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.ZONE }} --command='journalctl -u trading-bot -n 20'"
        fi
        
    - name: 🧹 Cleanup
      if: always()
      run: |
        rm -f /tmp/ssh_key /tmp/*.sh